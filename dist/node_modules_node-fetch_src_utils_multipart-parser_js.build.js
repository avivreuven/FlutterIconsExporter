"use strict";(self.webpackChunk_solaredge_exporter_icons_flutter=self.webpackChunk_solaredge_exporter_icons_flutter||[]).push([["node_modules_node-fetch_src_utils_multipart-parser_js"],{"./node_modules/node-fetch/src/utils/multipart-parser.js":
/*!***************************************************************!*\
  !*** ./node_modules/node-fetch/src/utils/multipart-parser.js ***!
  \***************************************************************/(e,t,n)=>{n.r(t),n.d(t,{toFormData:()=>_});var r=n(/*! fetch-blob/from.js */"./node_modules/fetch-blob/from.js"),a=n(/*! formdata-polyfill/esm.min.js */"./node_modules/formdata-polyfill/esm.min.js");let s=0;const o={START_BOUNDARY:s++,HEADER_FIELD_START:s++,HEADER_FIELD:s++,HEADER_VALUE_START:s++,HEADER_VALUE:s++,HEADER_VALUE_ALMOST_DONE:s++,HEADERS_ALMOST_DONE:s++,PART_DATA_START:s++,PART_DATA:s++,END:s++};let i=1;const d=i,E=i*=2,l=e=>32|e,A=()=>{};class h{constructor(e){this.index=0,this.flags=0,this.onHeaderEnd=A,this.onHeaderField=A,this.onHeadersEnd=A,this.onHeaderValue=A,this.onPartBegin=A,this.onPartData=A,this.onPartEnd=A,this.boundaryChars={},e="\r\n--"+e;const t=new Uint8Array(e.length);for(let n=0;n<e.length;n++)t[n]=e.charCodeAt(n),this.boundaryChars[t[n]]=!0;this.boundary=t,this.lookbehind=new Uint8Array(this.boundary.length+8),this.state=o.START_BOUNDARY}write(e){let t=0;const n=e.length;let r=this.index,{lookbehind:a,boundary:s,boundaryChars:i,index:A,state:h,flags:_}=this;const c=this.boundary.length,f=c-1,D=e.length;let u,T;const R=e=>{this[e+"Mark"]=t},b=e=>{delete this[e+"Mark"]},H=(e,t,n,r)=>{void 0!==t&&t===n||this[e](r&&r.subarray(t,n))},p=(n,r)=>{const a=n+"Mark";a in this&&(r?(H(n,this[a],t,e),delete this[a]):(H(n,this[a],e.length,e),this[a]=0))};for(t=0;t<n;t++)switch(u=e[t],h){case o.START_BOUNDARY:if(A===s.length-2){if(45===u)_|=E;else if(13!==u)return;A++;break}if(A-1==s.length-2){if(_&E&&45===u)h=o.END,_=0;else{if(_&E||10!==u)return;A=0,H("onPartBegin"),h=o.HEADER_FIELD_START}break}u!==s[A+2]&&(A=-2),u===s[A+2]&&A++;break;case o.HEADER_FIELD_START:h=o.HEADER_FIELD,R("onHeaderField"),A=0;case o.HEADER_FIELD:if(13===u){b("onHeaderField"),h=o.HEADERS_ALMOST_DONE;break}if(A++,45===u)break;if(58===u){if(1===A)return;p("onHeaderField",!0),h=o.HEADER_VALUE_START;break}if(T=l(u),T<97||T>122)return;break;case o.HEADER_VALUE_START:if(32===u)break;R("onHeaderValue"),h=o.HEADER_VALUE;case o.HEADER_VALUE:13===u&&(p("onHeaderValue",!0),H("onHeaderEnd"),h=o.HEADER_VALUE_ALMOST_DONE);break;case o.HEADER_VALUE_ALMOST_DONE:if(10!==u)return;h=o.HEADER_FIELD_START;break;case o.HEADERS_ALMOST_DONE:if(10!==u)return;H("onHeadersEnd"),h=o.PART_DATA_START;break;case o.PART_DATA_START:h=o.PART_DATA,R("onPartData");case o.PART_DATA:if(r=A,0===A){for(t+=f;t<D&&!(e[t]in i);)t+=c;t-=f,u=e[t]}if(A<s.length)s[A]===u?(0===A&&p("onPartData",!0),A++):A=0;else if(A===s.length)A++,13===u?_|=d:45===u?_|=E:A=0;else if(A-1===s.length)if(_&d){if(A=0,10===u){_&=~d,H("onPartEnd"),H("onPartBegin"),h=o.HEADER_FIELD_START;break}}else _&E&&45===u?(H("onPartEnd"),h=o.END,_=0):A=0;if(A>0)a[A-1]=u;else if(r>0){const e=new Uint8Array(a.buffer,a.byteOffset,a.byteLength);H("onPartData",0,r,e),r=0,R("onPartData"),t--}break;case o.END:break;default:throw new Error(`Unexpected state entered: ${h}`)}p("onHeaderField"),p("onHeaderValue"),p("onPartData"),this.index=A,this.state=h,this.flags=_}end(){if(this.state===o.HEADER_FIELD_START&&0===this.index||this.state===o.PART_DATA&&this.index===this.boundary.length)this.onPartEnd();else if(this.state!==o.END)throw new Error("MultipartParser.end(): stream ended unexpectedly")}}async function _(e,t){if(!/multipart/i.test(t))throw new TypeError("Failed to fetch");const n=t.match(/boundary=(?:"([^"]+)"|([^;]+))/i);if(!n)throw new TypeError("no or bad content-type header, no multipart boundary");const s=new h(n[1]||n[2]);let o,i,d,E,l,A;const _=[],c=new a.FormData,f=e=>{d+=R.decode(e,{stream:!0})},D=e=>{_.push(e)},u=()=>{const e=new r.File(_,A,{type:l});c.append(E,e)},T=()=>{c.append(E,d)},R=new TextDecoder("utf-8");R.decode(),s.onPartBegin=function(){s.onPartData=f,s.onPartEnd=T,o="",i="",d="",E="",l="",A=null,_.length=0},s.onHeaderField=function(e){o+=R.decode(e,{stream:!0})},s.onHeaderValue=function(e){i+=R.decode(e,{stream:!0})},s.onHeaderEnd=function(){if(i+=R.decode(),o=o.toLowerCase(),"content-disposition"===o){const e=i.match(/\bname=("([^"]*)"|([^()<>@,;:\\"/[\]?={}\s\t]+))/i);e&&(E=e[2]||e[3]||""),A=function(e){const t=e.match(/\bfilename=("(.*?)"|([^()<>@,;:\\"/[\]?={}\s\t]+))($|;\s)/i);if(!t)return;const n=t[2]||t[3]||"";let r=n.slice(n.lastIndexOf("\\")+1);return r=r.replace(/%22/g,'"'),r=r.replace(/&#(\d{4});/g,((e,t)=>String.fromCharCode(t))),r}(i),A&&(s.onPartData=D,s.onPartEnd=u)}else"content-type"===o&&(l=i);i="",o=""};for await(const t of e)s.write(t);return s.end(),c}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,